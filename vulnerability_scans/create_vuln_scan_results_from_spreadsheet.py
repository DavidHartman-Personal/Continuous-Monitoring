import logging
import os
import re

import coloredlogs
import openpyxl
import json
import datetime
from model import ScanResults

# Variable/constant declarations

FIRST_DATA_ROW = 2
ENVIRONMENT = "FRM"
YEAR_MONTH_DAY = datetime.datetime.now().strftime("%Y%m%d")
# 3 character month abbreviation
MONTH_ABBREV = datetime.datetime.now().strftime("%b")
# Month number
MONTH_NUM = datetime.datetime.now().strftime("%m")

SCAN_RESULTS_GENERATION_DAY = "20200705"

# C:\Users\dhartman\Documents\FedRAMP\Continuous Monitoring\Vulnerability-Scanning\L5\05 - MAY\PTC_L5_Weekly_Scan_Review_05312020.xlsx
FEDRAMP_DIR = "C:\\Users\\dhartman\\Documents\\FedRAMP\\Continuous " \
              "Monitoring\\Vulnerability-Scanning\\{environment}\\{month_number} - {month_abb}\\".format(
    environment=ENVIRONMENT,
    month_number=MONTH_NUM,
    month_abb=MONTH_ABBREV)
SCAN_RESULTS_SPREADSHEET = "PTC_{environment}_Weekly_Scan_Review_Results_Only_{year_month_day}.xlsx".format(
        environment=ENVIRONMENT,
        year_month_day=SCAN_RESULTS_GENERATION_DAY)
SCAN_RESULTS_SHEET_NAME = "All Items"

# Output Files
VULN_SCAN_OUTPUT_FILE_JSON = "PTC-{environment}-VULN-SCAN-RESULTS-{scan_result_generation_date}.json".format(
        environment=ENVIRONMENT,
        scan_result_generation_date=SCAN_RESULTS_GENERATION_DAY)
VULN_SCAN_RESULTS_JSON_FULL_PATH = os.path.join(FEDRAMP_DIR, VULN_SCAN_OUTPUT_FILE_JSON)
logging_level = 'INFO'
coloredlogs.install(level=logging_level,
                    fmt="%(asctime)s %(hostname)s %(name)s %(filename)s line-%(lineno)d %(levelname)s - %(message)s",
                    datefmt='%H:%M:%S')
def datetime_default(obj):
    if isinstance(obj, (datetime.date, datetime.datetime)):
        return obj.isoformat()

#
# def read_scan_result_excel(in_worksheet):
#     scan_result_results_out = {}
#     line_number = 0
#     for row in in_worksheet.iter_rows(min_row=FIRST_DATA_ROW, max_col=100, values_only=True):
#         if row[SCAN_RESULT.index('PLUGIN')] is None:
#             continue;
#         line_number += 1
#         plugin = row[SCAN_RESULT.index('PLUGIN')]
#         ip_address = row[SCAN_RESULT.index('IP_ADDRESS')]
#         protocol = row[SCAN_RESULT.index('PROTOCOL')]
#         port = row[SCAN_RESULT.index('PORT')]
#         # Key for the dictionary object is plugin, ip, protocol, port and year/month/day
#         scan_result_key = "{plugin}-{ip_address}-{protocol}-{port}".format(plugin=plugin,
#                                                                            ip_address=ip_address,
#                                                                            protocol=protocol,
#                                                                            port=port)
#
#         scan_result_results_out[scan_result_key] = dict(PLUGIN=row[SCAN_RESULT.index('PLUGIN')],
#                                                         PLUGIN_NAME=row[SCAN_RESULT.index('PLUGIN_NAME')],
#                                                         FAMILY=row[SCAN_RESULT.index('FAMILY')],
#                                                         SEVERITY=row[SCAN_RESULT.index('SEVERITY')],
#                                                         IP_ADDRESS=row[SCAN_RESULT.index('IP_ADDRESS')],
#                                                         PROTOCOL=row[SCAN_RESULT.index('PROTOCOL')],
#                                                         PORT=row[SCAN_RESULT.index('PORT')],
#                                                         EXPLOIT=row[SCAN_RESULT.index('EXPLOIT')],
#                                                         MAC_ADDRESS=row[SCAN_RESULT.index('MAC_ADDRESS')],
#                                                         DNS_NAME=row[SCAN_RESULT.index('DNS_NAME')],
#                                                         NETBIOS_NAME=row[SCAN_RESULT.index('NETBIOS_NAME')],
#                                                         PLUGIN_TEXT=row[SCAN_RESULT.index('PLUGIN_TEXT')],
#                                                         FIRST_DISCOVERED=row[SCAN_RESULT.index('FIRST_DISCOVERED')],
#                                                         LAST_OBSERVED=row[SCAN_RESULT.index('LAST_OBSERVED')],
#                                                         EXPLOIT_FRAMEWORKS=row[SCAN_RESULT.index('EXPLOIT_FRAMEWORKS')],
#                                                         VDRF=row[SCAN_RESULT.index('vdrf')],
#                                                         HOSTNAME=row[SCAN_RESULT.index('HOSTNAME')],
#                                                         NAME_IP=row[SCAN_RESULT.index('NAME_IP')],
#                                                         ENVIRONMENT=row[SCAN_RESULT.index('ENVIRONMENT')],
#                                                         CUSTOMER=row[SCAN_RESULT.index('CUSTOMER')],
#                                                         FUNCTION=row[SCAN_RESULT.index('FUNCTION')],
#                                                         LOCATION=row[SCAN_RESULT.index('LOCATION')],
#                                                         SYSTEM_OWNER=row[SCAN_RESULT.index('SYSTEM_OWNER')],
#                                                         FIRST_DISCOVERED_DATE=row[
#                                                             SCAN_RESULT.index('FIRST_DISCOVERED_DATE')],
#                                                         LAST_OBSERVED_DATE=row[SCAN_RESULT.index('LAST_OBSERVED_DATE')],
#                                                         DUE_DATE=row[SCAN_RESULT.index('DUE_DATE')],
#                                                         DAYS_AGED=row[SCAN_RESULT.index('DAYS_AGED')],
#                                                         AGEGROUP=row[SCAN_RESULT.index('AGEGROUP')],
#                                                         DAYS_TILL_DUE=row[SCAN_RESULT.index('DAYS_TILL_DUE')],
#                                                         REMEDIATION_TYPE=row[SCAN_RESULT.index('REMEDIATION_TYPE')],
#                                                         REMEDIATION_OWNER=row[SCAN_RESULT.index('REMEDIATION_OWNER')],
#                                                         POAM_STATUS=row[SCAN_RESULT.index('POAM_STATUS')],
#                                                         POAM_UPDATE=row[SCAN_RESULT.index('POAM_UPDATE')],
#                                                         REMEDIATION_PLAN=row[SCAN_RESULT.index('REMEDIATION_PLAN')],
#                                                         PLUGIN_ID_NAME=row[SCAN_RESULT.index('PLUGIN_ID_NAME')],
#                                                         NOTES=row[SCAN_RESULT.index('NOTES')]
#                                                         )
#     return scan_result_results_out


# def create_plugin_dictionary(scan_results_dict):
#     plugin_definitions = {}
#     for key, values in scan_results_dict.items():
#         scan_result_plugin = scan_results_dict[key]['PLUGIN']
#         if not plugin_definitions.get(scan_result_plugin):
#             plugin_definitions[scan_result_plugin] = dict(PLUGIN=scan_result_plugin,
#                                                           SEVERITY=scan_results_dict[key]['SEVERITY'],
#                                                           PLUGIN_NAME=scan_results_dict[key]['PLUGIN_NAME'],
#                                                           FIRST_DISCOVERED_DATE=scan_results_dict[key][
#                                                               'FIRST_DISCOVERED_DATE'],
#                                                           LAST_OBSERVED_DATE=scan_results_dict[key][
#                                                               'LAST_OBSERVED_DATE'],
#                                                           POAM_STATUS=scan_results_dict[key]['POAM_STATUS'],
#                                                           AFFECTED_HOSTS=[scan_results_dict[key]['IP_ADDRESS']])
#         else:
#             # if plugin has been seen before, just update the affected hosts value
#             plugin_definitions[scan_result_plugin]['AFFECTED_HOSTS'].append(scan_results_dict[key]['IP_ADDRESS'])


if __name__ == "__main__":
    scan_results_spreadsheet_file = os.path.join(FEDRAMP_DIR, SCAN_RESULTS_SPREADSHEET)
    # Normally this would be All Items
    weekly_scan_results = ScanResults.ScanResults(in_scan_date="20200705",scan_results_file=scan_results_spreadsheet_file, scan_results_worksheet="ScanResults")

    # Create POAM Report based on latest scan results and current POAMS


