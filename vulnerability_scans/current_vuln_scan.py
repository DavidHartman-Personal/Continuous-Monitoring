"""This module will load the current OPEN CMDBS into a dictionary object and make available various functions for
retrieving cmdb results.

"""
import os

import coloredlogs
import dateutil
from dateutil.parser import parse
import datetime
import re
import csv
import openpyxl
import pandas
import logging
import json

ENVIRONMENT = "L5"
YEAR_MONTH_DAY = datetime.datetime.now().strftime("%Y%m%d")
# 3 character month abbreviation
MONTH_ABBREV = datetime.datetime.now().strftime("%b")
# Month number
MONTH_NUM = datetime.datetime.now().strftime("%m")

SCAN_RESULTS_GENERATION_DAY = "20200705"

VULN_SCAN_DIR = "C:\\Users\\dhartman\\Documents\\FedRAMP\\Continuous " \
              "Monitoring\\Vulnerability-Scanning\\{environment}\\{month_number} - {month_abb}\\".format(
    environment=ENVIRONMENT,
    month_number=MONTH_NUM,
    month_abb=MONTH_ABBREV)
VULN_SCAN_FILE_JSON = "PTC-{environment}-VULN-SCAN-RESULTS-{scan_result_generation_date}.json".format(
        environment=ENVIRONMENT,
        scan_result_generation_date=SCAN_RESULTS_GENERATION_DAY)
VULN_SCAN_RESULTS_JSON_FULL_PATH = os.path.join(VULN_SCAN_DIR, VULN_SCAN_FILE_JSON)
# C:\Users\dhartman\Documents\FedRAMP\Continuous Monitoring\Vulnerability-Scanning\L5\05 - MAY\PTC-L5-POAM-20200531.json
logging_level = 'INFO'
coloredlogs.install(level=logging_level,
                    fmt="%(asctime)s %(hostname)s %(name)s %(filename)s line-%(lineno)d %(levelname)s - %(message)s",
                    datefmt='%H:%M:%S')
ALL_SCAN_RESULTS = {}

try:
    logging.info("Opening Vulnerability Scan Results master JSON file: %s",VULN_SCAN_RESULTS_JSON_FULL_PATH)
    with open(VULN_SCAN_RESULTS_JSON_FULL_PATH, "r") as vuln_scan_json_fh:
        ALL_SCAN_RESULTS = json.load(vuln_scan_json_fh)
except Exception as e:
    logging.error("Error opening cmdb results JSON file: %s", VULN_SCAN_RESULTS_JSON_FULL_PATH)
    raise ValueError("Error Reading cmdb JSON file [%s]: [%s]", VULN_SCAN_RESULTS_JSON_FULL_PATH, str(e))

IPS_IN_SCAN_RESULTS = []

SCAN_RESULT_IP_SET = set(())
for key, values in ALL_SCAN_RESULTS.items():
    SCAN_RESULT_IP_SET.add(values['IP_ADDRESS'])


def ip_in_scan_results(in_ip):
    return in_ip in SCAN_RESULT_IP_SET



def datetime_default(obj):
    if isinstance(obj, (datetime.date, datetime.datetime)):
        return obj.isoformat()


if __name__ == "__main__":
    # print_name_ip_listing()
    # out_name = get_name_from_ip("10.192.192.15")
    # print("name: " + out_name)
    # out_file = os.path.join(FEDRAMP_CMDBS_ROOT_DIR, "test.csv")
    # print_cmdb_to_csv(out_file)
    # create_fedramp_inv_and_mapping_workbook()
    ip_to_check = "10.39.86.20"
    print(ip_in_scan_results(ip_to_check))